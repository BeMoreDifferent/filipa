// import { ChatCompletionRequestMessage } from 'openai';

// The Role enum is no longer needed as role will be a flexible string.
// export enum Role {
//   Bot = 'bot',
//   User = 'user',
// }

/**
 * Represents a single tool call generated by the assistant.
 */
export interface ToolCall {
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only 'function' is supported.
   */
  type: 'function'; // Or other types if OpenAI expands this
  /**
   * The function that the model wants to call.
   */
  function: {
    /**
     * The name of the function to call.
     */
    name: string;
    /**
     * The arguments to call the function with, as a JSON string.
     */
    arguments: string;
  };
}

/**
 * Represents a message in a chat.
 * Aligns with the new database schema and common AI chat message structures.
 */
export interface Message {
  /**
   * Unique identifier for the message (UUID).
   * Generated by the application.
   */
  id: string;

  /**
   * Foreign key linking to the chats table (references chats.id, the integer PK).
   */
  chat_id: number;

  /**
   * The model used to generate this message (if applicable, e.g., for assistant messages).
   */
  model: string;

  /**
   * The role of the message sender (e.g., "user", "assistant", "system", "tool", "developer").
   */
  role: string;

  /**
   * The content of the message. Can be text, an array for multimodal content, or null.
   */
  content?: string | any[] | null;

  /**
   * An optional name for the participant.
   * Provides the model information to differentiate between participants of the same role.
   */
  name?: string;

  /**
   * For assistant messages: The tool calls generated by the model, such as function calls.
   */
  tool_calls?: ToolCall[];

  /**
   * For tool messages: The ID of the tool call that this message is responding to.
   */
  tool_call_id?: string;

  /**
   * Timestamp of when the message was created (ISO8601 string).
   */
  timestamp: string;

  /**
   * Additional application-specific data associated with the message, like pre-processed images or audio metadata.
   * Stored as a JSON object.
   */
  data?: Record<string, any>;

  /**
   * Catch-all for additional API response metadata related to this message.
   * Stored as a JSON object.
   */
  response?: Record<string, any>;

  /**
   * The complete, original message object as received from/sent to the API.
   * This field is crucial for storing all details from OpenAI, including deprecated fields
   * or new fields not explicitly defined in this interface.
   * Stored as a JSON object.
   */
  raw_message: Record<string, any>;

  /**
   * Indicates whether the message has been seen by the user.
   * Defaults to false if not provided.
   */
  seen?: boolean;

  /**
   * The full, raw response object as returned by the OpenAI API (or compatible provider).
   * This field is optional and is used for traceability, debugging, and future-proofing.
   * It is stored as a JSON object and may be undefined if not available.
   */
  rawOpenAIResponse?: Record<string, unknown>;
}

export interface Chat {
  /**
   * The integer primary key of the chat from the database.
   */
  id: number;
  /**
   * The user-defined title of the chat.
   */
  title: string;
  /**
   * A unique string identifier (UUID) for the chat.
   */
  uuid: string;
  message?: Message[]; // Optional: For holding messages related to the chat
}

// Retaining this for potential use with OpenAI API, though internal Message type is primary.
export interface OpenAIResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  // choices: [{ index: number; message: ChatCompletionRequestMessage; finish_reason: string }];
  choices: [{ index: number; message: any; finish_reason: string }]; // Use 'any' for now
  usage: { prompt_tokens: number; completion_tokens: number; total_tokens: number };
}
